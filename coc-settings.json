{
  // "coc.preferences.jumpCommand": ":vsplit",

  // Floating window
  "suggest.floatEnable": true,
  "diagnostic.messageTarget": "float",
  "signature.target": "float",
  "coc.preferences.hoverTarget": "float",

  // Completion
  "suggest.triggerAfterInsertEnter": false,
  "suggest.minTriggerInputLength": 1,
  "suggest.timeout": 500,
  "suggest.noselect": false,
  "suggest.detailField":"abbr",
  "suggest.snippetIndicator": " ",
  "suggest.triggerCompletionWait": 50,
  "suggest.echodocSupport": true,
  "suggest.completionItemKindLabels": {
      "keyword": "\uf1de",
      "variable": "\ue79b",
      "value": "\uf89f",
      "operator": "\u03a8",
      "function": "\u2A15",
      "reference": "\ufa46",
      "constant": "\uf8fe",
      "method": "\uf09a",
      "struct": "\ufb44",
      "class": "\uf0e8",
      "interface": "\uf417",
      "text": "\u2663",
      "enum": "\uf435",
      "enumMember": "\uf02b",
      "module": "\uf530",
      "color": "\ue22b",
      "property": "\ue624",
      "field": "\uf6a6",
      "unit": "\uf475",
      "event": "\ufacd",
      "file": "\uf723",
      "folder": "\uf114",
      "snippet": "\ue60b",
      "typeParameter": "\uf728",
      "default": "\uf29c"
  },

  // Diagnostics
  "diagnostic.enable": true,
  "diagnostic.enableSign": true,
  "diagnostic.enableHighlightLineNumber": false,
  "diagnostic.hintSign": "⊹",
  "diagnostic.infoSign": "",
  "diagnostic.warningSign": "",
  "diagnostic.errorSign": "",
  "diagnostic.messageDelay": 150,
  "diagnostic.displayByAle": false,
  "diagnostic.refreshOnInsertMode": false,

  // Git
  "git.enableGutters": false,
  // "git.branchCharacter":"\uf408",
  // "git.addGBlameToBufferVar": true,
  // "git.addGBlameToVirtualText": true,
  // "git.virtualTextPrefix": " ❯❯❯ ",
  // "git.addedSign.hlGroup": "GitGutterAdd",
  // "git.changedSign.hlGroup": "GitGutterChange",
  // "git.removedSign.hlGroup": "GitGutterDelete",
  // "git.topRemovedSign.hlGroup": "GitGutterDelete",
  // "git.changeRemovedSign.hlGroup": "GitGutterChangeDelete",
  // "git.addedSign.text":"▎",
  // "git.changedSign.text":"▎",
  // "git.removedSign.text":"▏",
  // "git.topRemovedSign.text": "▔",
  // "git.changeRemovedSign.text": "▋",

  // Snippet
  "coc.preferences.snippetStatusText": "Ⓢ ",

  // CocList
  "list.source.files.defaultOptions": ["--auto-preview"],
  "list.source.outline.defaultOptions": ["--auto-preview"],

  // Prettier
  // "coc.preferences.formatOnSaveFiletypes": ["css", "scss"],
  "prettier.statusItemText": "ⓟ",
  "prettier.eslintIntegration": true,
  "prettier.tslintIntegration": true,

  // CSS
  "css.enable": true,

  // Markdown
  "markdownlint.config": {
    "default": true,
    "line_length": false,
    "ul-style": false
  },
  "markdownlint.onOpen": true,
  "markdownlint.onSave": true,
  "markdownlint.onChange": false,

  "coc.source.emoji.filetypes": [
    "markdown",
    "vimwiki"
  ],

  "coc.source.dictionary.filetypes": [
    "markdown",
    "vimwiki"
  ],

  // HTML/Emmet
  "html.enable": true,
  "html.filetypes": [
      "htmldjango",
      "html",
      "handlebars"
  ],

  "html.format.enable": true,
  "html.validate.styles": true,
  "html.validate.scripts": true,
  "html.validate.html": true,
  "emmet.includeLanguages": {
    "htmldjango": "html",
    "handlebars": "html",
    "vue-html": "html"
  },

  // Multiple curssors
  "cursors.nextKey": "<C-n>",
  "cursors.previousKey": "<C-p>",
  "cursors.cancelKey": "<Esc>",
  // Sessions
  "session.directory": "~/.cache/vim/session",

  // Eslint
  "eslint.autoFixOnSave": false,

  // Python
  "python.jediEnabled": false,

  // Javascript
  // "tsserver.npm": "/usr/bin/npm",  // `nvm deactivate` to make this work

  // Java
  "java.enabled": false,
  "java.import.maven.enabled": true,
  "java.import.gradle.enabled": true,
  "java.import.gradle.wrapper.enabled": true,
  "java.maven.downloadSources": true,
  "java.implementationsCodeLens.enabled": false,
  "java.referencesCodeLens.enabled": false,
  "java.signatureHelp.enabled": false,
  "java.autobuild.enabled": false,
  "java.errors.incompleteClasspath.severity": "error",
  "java.completion.enabled": true,
  "java.completion.overwrite": false,
  "java.completion.importOrder": [
    "java",
    "javafx",
    "javax",
    "com",
    "org"
  ],

  // Bash language server
  "sh.enable": true,

  // Spell Checker
  "cSpell.enabled": true,
  "cSpell.language": "en",
  "cSpell.diagnosticLevel": "Hint",
  "cSpell.enabledLanguageIds": [
    "csharp",
    "css",
    "go",
    "html",
    "java",
    "javascript",
    "javascriptreact",
    "less",
    "markdown",
    "php",
    "plaintext",
    "python",
    "scss",
    "sh",
    "tex",
    "text",
    "typescript",
    "typescriptreact",
    "vim",
    "vimwiki",
    "yml",
    "zsh"
  ],
  "cSpell.fixSpellingWithRenameProvider": true,
  "cSpell.maxNumberOfProblems": 100,
  "cSpell.numSuggestions": 8,
  "cSpell.minWordLength": 4,
  "cSpell.showStatus": true,
  // Words to add to dictionary for a workspace.
  "cSpell.words": [],
  // Enable / Disable compound words like 'errormessage'
  "cSpell.allowCompoundWords": true,
  "cSpell.ignoreWords": [
    "colour",
    "behaviour"
  ],
  "cSpell.userWords": [
    "Lucernas",
    "Mindfuck",
    "nums"
  ],
  "cSpell.ignorePaths": [
    "node_modules",        // this will ignore anything the node_modules directory
    "**/node_modules",     // the same for this one
    "**/node_modules/**",  // the same for this one
    "node_modules/**",     // Doesn't currently work due to how the current working directory is determined.
    "vscode-extension",
    ".git",                // Ignore the .git directory
    "*.dll",               // Ignore all .dll files.
    "**/*.dll"             // Ignore all .dll files
  ],
  // flagWords - list of words to be always considered incorrect
  // This is useful for offensive words and common spelling errors.
  // For example "hte" should be "the"`
  "cSpell.flagWords": ["hte"],
  "cSpell.spellCheckDelayMs": 50,

  // Coc-yank
  "yank.highlight.enable": true,
  "yank.highlight.duration": 100,
  "yank.enableCompletion": false,

  "languageserver": {
    "ccls": {
      "enable": false,
      "command": "ccls",
      "filetypes": ["c", "cpp", "objc", "objcpp"],
      "rootPatterns": [".ccls", "compile_commands.json", ".vim/", ".git/", ".hg/"],
      "initializationOptions": {
         "cache": {
           "directory": "/tmp/ccls"
         }
       }
    }
  },
  // Auto generated by coc-clangd
  "clangd.path": "~/.config/coc/extensions/coc-clangd-data/install/14.0.0/clangd_14.0.0/bin/clangd",

  // Omnisharp
  "coc.source.OmniSharp.filetypes": [
    "cs"
  ],
  "coc.source.OmniSharp.enable" : true,
  "coc.source.OmniSharp.triggerCharacters": "."
}
