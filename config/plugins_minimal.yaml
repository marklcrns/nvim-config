# why use yaml to manage plugins
# see http://genkisugimoto.com/blog/manage-vim-plugins-via-yaml/
# hook_source:  executed after the plugins are sourced
# hook_add:     executed after the line is parsed

# Normal Loaded Plugins
# ==========================================

# Startup {{{
- repo: glepnir/dashboard-nvim
  hook_source: source $VIM_PATH/config/plugins/dashboard.vim

# Package Manager
# ----------------------------------------
- repo: Shougo/dein.vim

# Completion
# ----------------------------------------
- repo: neoclide/coc.nvim
  merged: 0
  rev: release
  hook_add: source $VIM_PATH/config/plugins/coc.vim

- repo: SirVer/ultisnips
  hook_add: source $VIM_PATH/config/plugins/ultisnips.vim

- repo: honza/vim-snippets
  depends: ultisnips

# UI
# ----------------------------------------

# Tools
# ----------------------------------------
- repo: dhruvasagar/vim-zoom
  hook_add: |
    let g:zoom#statustext = 'F'

- repo: christoomey/vim-tmux-navigator
  if: "! (has('win32') || has('win64'))"
  hook_add: |
    let g:tmux_navigator_disable_when_zoomed = 1

- repo: tpope/vim-unimpaired
- repo: tpope/vim-eunuch
- repo: Shougo/context_filetype.vim
- repo: sgur/vim-editorconfig
  hook_source: |
    let g:editorconfig_verbose = 1
    let g:editorconfig_blacklist = {
      \ 'filetype': [
      \   'git.*', 'fugitive', 'help', 'defx', 'denite.*', 'startify',
      \   'dashboard', 'vista.*', 'tagbar', 'lsp-.*', 'clap_.*', 'any-jump',
      \   'gina-.*'
      \  ],
      \ 'pattern': ['\.un~$']
      \ }

# Improve CursorHold performance
# See: https://github.com/neovim/neovim/issues/12587
- { repo: antoinemadec/FixCursorHold.nvim, if: "has('nvim')" }

# Vim8 only:
- { repo: roxma/nvim-yarp, if: "! has('nvim')", depends: vim-hug-neovim-rpc }
- { repo: roxma/vim-hug-neovim-rpc, if: "! has('nvim')" }
# }}}


# Lazy Loading
# ==========================================

# Completion{{{

# HTML
# -----
- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [ html,css,javascript,javascriptreact,vue,typescript,typescriptreact ]
  hook_source: |
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'
    let g:user_emmet_leader_key = '<C-;>'

# Vim Commandline
# -----
- repo: Shougo/echodoc.vim
  on_event: CompleteDone
  hook_source: |
    call echodoc#enable()
    let g:echodoc#type = "virtual"
# }}}

# Syntax{{{

# Coding tools
# ----------------------------------------
- repo: junegunn/vim-easy-align
  on_ft: [vim, md, vimwiki, json, go, html, js, jsx, py, css, java, less, tmpl, toml, xml, sql, Dockerfile]
  hook_source: source $VIM_PATH/config/plugins/vim-easy-align.vim

- repo: kana/vim-niceblock
  on_map: { x: <Plug> }
  hook_add: let g:niceblock_no_default_key_mappings = 0

- repo: tyru/caw.vim
  on_map: { nx: <Plug> }

- repo: machakann/vim-sandwich
  on_map: { vonx: <Plug>(operator-sandwich- }
  hook_add: |
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

- repo: Raimondi/delimitMate
  on_event: FileType
  hook_source: source $VIM_PATH/config/plugins/delimitMate.vim
# }}}


# Git{{{
- repo: tpope/vim-fugitive
  on_cmd: [G, Git, Gfetch, Gpush, Gstatus, Glog, Gclog, Gllog, Gdiffsplit, Gvdiffsplit]
# }}}

# Markdown
# ---------------------------------------
- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: source $VIM_PATH/config/plugins/vim-markdown.vim

# Python
# ----------------------------------------
- repo: tmhedberg/SimpylFold
  on_ft: python

- repo: vim-scripts/python_match.vim
  on_ft: python

# Tools{{{
- { repo: andymass/vim-matchup, on_event: FileType }
- { repo: itchyny/vim-parenmatch, on_event: FileType }
- { repo: itchyny/vim-gitbranch, on_event: FileType }
- { repo: romainl/vim-cool, on_event: [ CursorMoved, InsertEnter ] }

- repo: liuchengxu/vim-clap
  merged: 0
  build: call clap#installer#build_all()
  on_map: { n: <Plug> }
  hook_source: source $VIM_PATH/config/plugins/vim-clap.vim

- repo: hokorobi/vim-clap-sessions
  depends: vim-clap
  hook_add: |
    let g:clap_session_dir = $DATA_PATH . '/session'

- repo: liuchengxu/vista.vim
  on_cmd: Vista
  hook_source: source $VIM_PATH/config/plugins/vista.vim

- repo: liuchengxu/vim-which-key
  on_cmd: [Whichkey, Whichkey!]
  hook_add: source $VIM_PATH/config/plugins/whichkey.vim
  hook_post_source: |
    call which_key#register('<Space>', 'g:which_key_map')
    call which_key#register(';', 'g:which_key_localmap')
    call which_key#register(']', 'g:which_key_rsbgmap')
    call which_key#register('[', 'g:which_key_lsbgmap')
    call which_key#register('d', 'g:which_key_dmap')
    call which_key#register('s', 'g:which_key_smap')
    call which_key#register('g', 'g:which_key_gmap')

- repo: ludovicchabant/vim-gutentags
  if: "executable('ctags')"
  on_event: [BufReadPost, BufWritePost]
  hook_source: source $VIM_PATH/config/plugins/vim-gutentags.vim

- repo: airblade/vim-rooter
  on_event: FileType
  hook_add: |
    let g:rooter_change_directory_for_non_project_files = 'current'
    let g:rooter_manual_only = 1
    let g:rooter_patterns = [
        \ '=src',
        \ '.git/',
        \ 'README.*',
        \ 'node_modules/',
        \ 'pom.xml',
        \ 'env/',
        \ '.root',
        \ '.editorconfig',
        \ ]
    let g:rooter_silent_chdir = 1
    let g:rooter_resolve_links = 1
    let g:rooter_cd_cmd = 'lcd'

- repo: thinca/vim-quickrun
  on_cmd: QuickRun
  hook_add: |
    let g:quickrun_config = {
        \   "_" : {
        \       "outputter" : "message",
        \   },
        \}
    let g:quickrun_no_default_key_mappings = 1

- repo: kshenoy/vim-signature
  on_event: FileType
  hook_add: |
    let g:SignatureForceRemoveGlobal = 0
    let g:SignatureUnconditionallyRecycleMarks = 1
    let g:SignatureErrorIfNoAvailableMarks = 0
    let g:SignaturePurgeConfirmation = 0
    let g:SignatureMarkTextHLDynamic = 1
    let g:SignatureMarkerTextHLDynamic = 1
    let g:SignatureIncludeMarkers = repeat('‚öê', 10)
    autocmd user_events User GitGutter call signature#sign#Refresh()

- repo: simnalamburt/vim-mundo
  on_map: {n: <Plug>}

- repo: tpope/vim-repeat
  on_map: .*

- repo: pechorin/any-jump.vim
  on_cmd: AnyJump
  hook_source: source $VIM_PATH/config/plugins/any-jump.vim
# }}}

# UI{{{
- repo: romainl/vim-qf
  on_ft: qf
  on_event: QuickFixCmdPost
  on_map: { n: <Plug> }
  hook_add: |
    let g:qf_bufname_or_text = 1
    let g:qf_auto_open_quickfix = 0
    let g:qf_auto_open_loclist = 0
    let g:qf_auto_resize = 0
    let g:qf_auto_quit = 0

- repo: itchyny/vim-cursorword
  on_event: FileType
  hook_add: let g:cursorword = 0
  hook_source: |
    augroup user_plugin_cursorword
      autocmd!
      autocmd FileType json,yaml,markdown,nginx,dosini,conf
        \ let b:cursorword = 1
      autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif
      autocmd InsertEnter * if get(b:, 'cursorword', 0) == 1
        \| let b:cursorword = 0
        \| endif
      autocmd InsertLeave * if get(b:, 'cursorword', 1) == 0
        \| let b:cursorword = 1
        \| endif
    augroup END

- repo: rhysd/accelerated-jk
  on_map: { n: <Plug> }
  hook_source: |
    let g:accelerated_jk_enable_deceleration = 1
    let g:accelerated_jk_acceleration_limit = 300

- repo: nathanaelkane/vim-indent-guides
  on_event: FileType
  hook_source: source $VIM_PATH/config/plugins/vim-indent-guides.vim

- repo: lambdalisue/fern.vim
  on_cmd: Fern
  hook_source: source $VIM_PATH/config/plugins/fern.vim

- repo: lambdalisue/fern-renderer-nerdfont.vim
  on_source: fern.vim

- repo: lambdalisue/nerdfont.vim
  on_source: fern.vim

- repo: lambdalisue/glyph-palette.vim
  on_source: fern.vim

- repo: lambdalisue/fern-git-status.vim
  on_source: fern.vim

- repo:  lambdalisue/fern-mapping-project-top.vim
  on_source: fern.vim
# }}}

# Text Objects {{{
- repo: terryma/vim-expand-region
  on_map: { x: <Plug> }
- repo: kana/vim-textobj-function
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_function_no_default_key_mappings = 1
# }}}
