# Plugins Parsed by TOML
# NOTE: `g:package_manager' must be set to 'dein_toml'
# hook_add:     executed after the line is parsed
# hook_source:  executed after the plugins are sourced

# Lazy Loading
# ==========================================

# Completion{{{

repo = 'SirVer/ultisnips'
if = 'has("python3")'
on_event = 'FileType'
hook_add = 'source $VIM_PATH/config/plugins/ultisnips.vim'

repo = 'honza/vim-snippets'
if = 'has("python3")'
depends = 'ultisnips'
on_event = 'FileType'
merged = '0'

# Vim Commandline
# -----
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
	call echodoc#enable()
	let g:echodoc#type = "virtual"
'''
# }}}

# Syntax{{{

# Coding tools
# ----------------------------------------

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_ft = ['vim', 'md', 'vimwiki', 'json', 'go', 'html', 'js', 'jsx', 'py', 'css', 'java', 'less', 'tmpl', 'toml', 'xml', 'sql', 'Dockerfile']
hook_source = '''
  source $VIM_PATH/config/plugins/vim-easy-align.vim
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map =  { x = '<Plug>' }
hook_add = '''
  let g:niceblock_no_default_key_mappings = 0
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = { nx = '<Plug>' }

[[plugins]]
repo = 'machakann/vim-sandwich'
on_map = { vonx = '<Plug>(operator-sandwich-' }
hook_add = '''
  let g:sandwich_no_default_key_mappings = 1
  let g:operator_sandwich_no_default_key_mappings = 1
  let g:textobj_sandwich_no_default_key_mappings = 1
'''

[[plugins]]
repo = 'Raimondi/delimitMate'
on_event = 'FileType'
hook_source = '''
  source $VIM_PATH/config/plugins/delimitMate.vim
'''
# }}}


# Git{{{
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'

repo = 'airblade/vim-gitgutter'
on_event = 'FileType'
hook_add = '''
	let g:gitgutter_map_keys = 0
	let g:gitgutter_sign_added = '▎'
	let g:gitgutter_sign_modified = '▎'
	let g:gitgutter_sign_removed = '▍'
	let g:gitgutter_sign_removed_first_line = '▘'
	let g:gitgutter_sign_removed_above_and_below = '_¯'
	let g:gitgutter_sign_modified_removed = '▍'
	let g:gitgutter_preview_win_floating = 1
	let g:gitgutter_sign_allow_clobber = 0
	let g:gitgutter_sign_priority = 0
	let g:gitgutter_override_sign_column_highlight = 0
	let g:gitgutter_set_sign_backgrounds = 1
'''
# }}}

# Markdown
# ---------------------------------------
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  source $VIM_PATH/config/plugins/vim-markdown.vim
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'sh -c "cd app && yarn install"'
hook_source = '''
  source $VIM_PATH/config/plugins/markdown-preview.vim
'''

# Python
# ----------------------------------------
[[plugins]]
repo = 'tmhedberg/SimpylFold'
on_ft = 'python'

[[plugins]]
repo = 'vim-scripts/python_match.vim'
on_ft = 'python'

# Tools{{{
[[plugins]]
repo = 'andymass/vim-matchup'
on_event = 'FileType'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
on_event = 'FileType'

[[plugins]]
repo = 'itchyny/vim-gitbranch'
on_event = 'FileType'
[[plugins]]

repo = 'romainl/vim-cool'
on_event = ['CursorMoved', 'InsertEnter']

# [[plugins]]
# repo = 'junegunn/fzf'
# merged = '0'
# on_cmd = 'FZF'
# type__depth = '1'
# hook_source = '''
#   let g:fzf_layout = { 'down': '~25%' }
# '''
# 
# [[plugins]]
# repo = 'junegunn/fzf.vim'
# depends = ['fzf']
# merged = '0'
# on_cmd = ['Files', 'GitFiles', 'Buffers', 'Lines', 'Locate', 'Colors', 'Ag', 'Rg', 'Tags']
# on_func = [ 'fzf#vim#with_preview', 'fzf#run', 'vista#finder#fzf#Run' ]

[[plugins]]
repo = 'liuchengxu/vim-clap'
build = 'call clap#installer#build_all()'
on_map = { n = '<Plug>' }
on_func = [ 'vista#finder#clap#Run' ]
hook_source = '''
  source $VIM_PATH/config/plugins/vim-clap.vim
'''
#
[[plugins]]
repo = 'hokorobi/vim-clap-sessions'
depends = ['vim-clap']
hook_add = '''
	let g:clap_session_dir = $DATA_PATH . '/sessions'
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
on_cmd = 'Vista'
hook_source = '''
  source $VIM_PATH/config/plugins/vista.vim
'''

[[plugins]]
repo = 'liuchengxu/vim-which-key'
on_cmd = ['Whichkey', 'Whichkey!']
hook_add = '''
  source $VIM_PATH/config/plugins/whichkey.vim
'''
hook_post_source = '''
  call which_key#register('<Space>', 'g:which_key_map')
  call which_key#register(';', 'g:which_key_localmap')
  call which_key#register(']', 'g:which_key_rsbgmap')
  call which_key#register('[', 'g:which_key_lsbgmap')
  call which_key#register('d', 'g:which_key_dmap')
  call which_key#register('s', 'g:which_key_smap')
  call which_key#register('g', 'g:which_key_gmap')
'''

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
on_if = 'executable("ctags")'
on_event = ['BufReadPost', 'BufWritePost']
hook_source = '''
  source $VIM_PATH/config/plugins/vim-gutentags.vim
'''

[[plugins]]
repo = 'airblade/vim-rooter'
on_event = 'FileType'
hook_add = '''
  let g:rooter_change_directory_for_non_project_files = 'current'
  let g:rooter_manual_only = 1
  let g:rooter_patterns = [
    \ '=src',
    \ '.git/',
    \ 'README.*',
    \ 'node_modules/',
    \ 'pom.xml',
    \ 'env/',
    \ '.root',
    \ '.editorconfig',
    \ ]
  let g:rooter_silent_chdir = 1
  let g:rooter_resolve_links = 1
  let g:rooter_cd_cmd = 'lcd'
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
let g:quickrun_config = {
    \   "_" : {
    \       "outputter" : "message",
    \   },
    \}
let g:quickrun_no_default_key_mappings = 1
'''

[[plugins]]
repo = 'kshenoy/vim-signature'
on_event = 'FileType'
hook_add = '''
  let g:SignatureForceRemoveGlobal = 1
  let g:SignatureUnconditionallyRecycleMarks = 1
  let g:SignatureErrorIfNoAvailableMarks = 0
  let g:SignaturePurgeConfirmation = 0
  let g:SignatureMarkTextHLDynamic = 1
  let g:SignatureMarkerTextHLDynamic = 1
  let g:SignatureIncludeMarkers = repeat('⚐', 10)
'''

[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_map = {n = '<Plug>'}

[[plugins]]
repo = 'tpope/vim-repeat'
on_map = '.*'

repo = 'pechorin/any-jump.vim'
on_cmd = 'AnyJump'
hook_source = 'source $VIM_PATH/config/plugins/any-jump.vim'

# Only load when in wiki directory
[[plugins]]
repo = 'vimwiki/vimwiki'
on_if = "(getcwd() =~ $HOME . '/Documents/wiki.*' && &filetype == 'markdown')"
on_cmd = ['VimwikIndex', 'VimwikiDiaryIndex', 'VimwikiUISelect']
hook_add = '''
  let g:vimwiki_use_calendar = 1
  let g:vimwiki_hl_headers = 1
  let g:vimwiki_hl_cb_checked = 1
  let g:vimwiki_autowriteall = 0
  let g:vimwiki_folding = 'custom'
  let g:vimwiki_key_mappings =
    \ {
    \   'all_maps': 1,
    \   'global': 1,
    \   'headers': 1,
    \   'text_objs': 1,
    \   'table_format': 1,
    \   'table_mappings': 0,
    \   'lists': 1,
    \   'links': 1,
    \   'html': 1,
    \   'mouse': 0,
    \ }
  let g:vimwiki_map_prefix = '<LocalLeader>w'
'''
hook_source = '''
  source $VIM_PATH/config/plugins/vimwiki.vim
'''

# Only load when in wiki diary sub directory
[[plugins]]
repo = 'tbabej/taskwiki'
on_if = "(getcwd() =~ $HOME . '/Documents/wiki.*' && &filetype == 'markdown')"
depends = ['vimwiki']
hook_source = '''
  source $VIM_PATH/config/plugins/taskwiki.vim
'''

[[plugins]]
repo = 'xarthurx/taskwarrior.vim'
on_event = 'FileType'

# UI {{{
repo = 'romainl/vim-qf'
on_ft = 'qf'
on_event = 'QuickFixCmdPost'
on_map = '{ n: <Plug> }'
hook_add = '''
	let g:qf_bufname_or_text = 1
	let g:qf_auto_open_quickfix = 0
	let g:qf_auto_open_loclist = 0
	let g:qf_auto_resize = 0
	let g:qf_auto_quit = 0
'''

repo = 'itchyny/vim-cursorword'
on_event = 'FileType'
hook_add = 'let g:cursorword = 0'
hook_source = '''
	augroup user_plugin_cursorword
	autocmd!
	autocmd FileType json,yaml,markdown,nginx,dosini,conf
	\ let b:cursorword = 1
	autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif
	autocmd InsertEnter * if get(b:, 'cursorword', 0) == 1
	\| let b:cursorword = 0
	\| endif
	autocmd InsertLeave * if get(b:, 'cursorword', 1) == 0
	\| let b:cursorword = 1
	\| endif
	augroup END
'''

repo = 'rhysd/accelerated-jk'
on_map = '{ n: <Plug> }'
hook_source = '''
	let g:accelerated_jk_enable_deceleration = 1
	let g:accelerated_jk_acceleration_limit = 300
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_event = 'FileType'
hook_source = '''
  source $VIM_PATH/config/plugins/vim-indent-guides.vim
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
if = 'has("nvim") && has("nvim-0.4.0")'
on_event = 'FileType'
hook_source = 'luafile $VIM_PATH/config/plugins/colorizer.lua'

[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'
if = 'has("nvim") && has("nvim-0.5")'
on_cmd = '[ NvimTreeToggle, NvimTreeOpen ]'
hook_add = '''
	source $VIM_PATH/config/plugins/nvim-tree.vim
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
if = 'has("nvim") && has("nvim-0.5")'
on_source = 'nvim-tree.lua'

[[plugins]]
repo = 'lambdalisue/fern.vim'
on_cmd = 'Fern'
hook_source = '''
  source $VIM_PATH/config/plugins/fern.vim
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
on_source = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'
on_source = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
on_source = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
on_source = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-mapping-project-top.vim'
on_source = ['fern.vim']
# }}}

# Text Objects {{{
[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = { x = '<Plug>' }

# only autoload functions, lazy by nature'
[[plugins]]
repo = 'kana/vim-textobj-user'

# only autoload functions, lazy by nature'
[[plugins]]
repo = 'kana/vim-textobj-function'
on_map = { ox = '<Plug>' }
hook_add = '''
  let g:textobj_function_no_default_key_mappings = 1
'''
# }}}

# ETC {{{
[[plugins]]
repo = 'ianding1/leetcode.vim'
on_cmd = ['LeetCodeList', 'LeetCodeTest', 'LeetCodeSubmit', 'LeetCodeSignIn']
hook_add = '''
  let g:leetcode_browser = 'firefox'
  let g:leetcode_solution_filetype = 'java'
'''
# }}}

