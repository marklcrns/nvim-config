# why use yaml to manage plugins
# see http://genkisugimoto.com/blog/manage-vim-plugins-via-yaml/
# hook_add:     executed after the line is parsed
# hook_source:  executed after the plugins are sourced

# Normal Loaded Plugins
# ==========================================

# Startup {{{
- repo: Shougo/dein.vim

- repo: glepnir/dashboard-nvim
  hook_source: source $VIM_PATH/config/plugins/dashboard.vim

# Completion
# ----------------------------------------
- repo: neoclide/coc.nvim
  merged: 0
  rev: release
  hook_add: source $VIM_PATH/config/plugins/coc.vim

# Tools
# ----------------------------------------
- repo: dhruvasagar/vim-zoom
  hook_add: |
    let g:zoom#statustext = 'F'
- repo: szw/vim-maximizer
  hook_source: |
    let g:maximizer_set_default_mapping = 0

- repo: christoomey/vim-tmux-navigator
  if: "! (has('win32') || has('win64'))"
  hook_add: |
    let g:tmux_navigator_disable_when_zoomed = 1

- repo: sgur/vim-editorconfig
  hook_source: |
    let g:editorconfig_verbose = 1
    let g:editorconfig_blacklist = {
      \ 'filetype': [
      \   'git.*', 'fugitive', 'help', 'defx', 'denite.*', 'startify',
      \   'dashboard', 'vista.*', 'tagbar', 'lsp-.*', 'clap_.*', 'any-jump',
      \   'gina-.*'
      \  ],
      \ 'pattern': ['\.un~$']
      \ }

- repo: tpope/vim-eunuch
- repo: Shougo/context_filetype.vim

- repo: sunjon/Shade.nvim
  hook_source: |
    luafile $VIM_PATH/config/plugins/shade.lua

- repo: dm1try/golden_size
  if: "has('nvim') && has('nvim-0.5')"
  hook_source: luafile $VIM_PATH/config/plugins/golden_size.lua

# Improve CursorHold performance
# See: https://github.com/neovim/neovim/issues/12587
- { repo: antoinemadec/FixCursorHold.nvim, "if: has('nvim')" }

# Vim8 only:
- { repo: roxma/nvim-yarp, if: "! has('nvim')", depends: vim-hug-neovim-rpc }
- { repo: roxma/vim-hug-neovim-rpc, if: "! has('nvim')" }
# }}}


# Lazy Loading
# ==========================================

# Completion{{{

- repo: SirVer/ultisnips
  if: has('python3')
  on_event: FileType
  hook_add: source $VIM_PATH/config/plugins/ultisnips.vim

- repo: honza/vim-snippets
  if: has('python3')
  depends: ultisnips
  on_event: FileType
  merged: 0

# HTML
# -----
- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [ html,css,javascript,javascriptreact,vue,typescript,typescriptreact ]
  hook_source: |
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'
    let g:user_emmet_leader_key = '<C-;>'

# Vim Commandline
# -----
- repo: Shougo/echodoc.vim
  on_event: CompleteDone
  hook_source: |
    call echodoc#enable()
    let g:echodoc#type = "virtual"
# }}}

# Syntax{{{

# Linters & Formaters
# ----------------------------------------

# Syntax
# ----------------------------------------
- repo: tmux-plugins/vim-tmux

- repo: luochen1990/rainbow
  on_ft: [python, javascript, javascriptreact, java, html, css, go, vim, toml]
  hook_source: |
    let g:rainbow_active = 0

# Coding tools
# ----------------------------------------
- repo: puremourning/vimspector
  hook_source: source $VIM_PATH/config/plugins/vimspector.vim
  hook_add: |
    let g:vimspector_enable_mappings = 'HUMAN'

- repo: junegunn/vim-easy-align
  on_ft: [vim, md, vimwiki, json, go, html, js, jsx, py, css, java, less, tmpl, toml, xml, sql, Dockerfile]
  hook_source: source $VIM_PATH/config/plugins/vim-easy-align.vim

- repo: AndrewRadev/linediff.vim
  on_cmd: Linediff
  hook_add: |
    let g:linediff_indent = 1
    let g:linediff_first_buffer_command  = 'leftabove new'
    let g:linediff_further_buffer_command = 'rightbelow vertical new'
    let g:linediff_diffopt = 'filler,iwhite'

- repo: kana/vim-niceblock
  on_map: { x: <Plug> }
  hook_add: let g:niceblock_no_default_key_mappings = 0

- repo: tyru/caw.vim
  on_map: { nx: <Plug> }

- repo: machakann/vim-sandwich
  on_map: { vonx: <Plug>(operator-sandwich- }
  hook_add: |
    let g:sandwich_no_default_key_mappings = 1
    let g:operator_sandwich_no_default_key_mappings = 1
    let g:textobj_sandwich_no_default_key_mappings = 1

- repo: Raimondi/delimitMate
  on_event: FileType
  hook_source: source $VIM_PATH/config/plugins/delimitMate.vim
# }}}


# Git{{{
- repo: lambdalisue/gina.vim
  on_cmd: Gina
  on_ft: [ gitcommit, gitrebase ]
  hook_source: source $VIM_PATH/config/plugins/gina.vim

- repo: rhysd/committia.vim
  on_event: BufReadPost
  hook_add: |
    let g:committia_hooks = {}
    function! g:committia_hooks.edit_open(info)
      " Additional settings
      setlocal spell

      " If no commit message, start with insert mode
      if a:info.vcs ==# 'git' && getline(1) ==# ''
          startinsert
      endif

      " Scroll the diff window from insert mode
      " Map <C-n> and <C-p>
      imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
      imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
    endfunction

- repo: airblade/vim-gitgutter
  on_event: FileType
  hook_add: |
    let g:gitgutter_map_keys = 0
    let g:gitgutter_sign_added = '▎'
    let g:gitgutter_sign_modified = '▎'
    let g:gitgutter_sign_removed = '▍'
    let g:gitgutter_sign_removed_first_line = '▘'
    let g:gitgutter_sign_removed_above_and_below = '_¯'
    let g:gitgutter_sign_modified_removed = '▍'
    let g:gitgutter_preview_win_floating = 1
    let g:gitgutter_sign_allow_clobber = 0
    let g:gitgutter_sign_priority = 0
    let g:gitgutter_override_sign_column_highlight = 0
    let g:gitgutter_set_sign_backgrounds = 1

- repo: tyru/open-browser.vim
  hook_source: |
    let g:netrw_nogx = 1
    command! -nargs=1 Browse OpenBrowser <args>
# }}}

# Languages {{{

# Markdown
# ---------------------------------------
- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_source: source $VIM_PATH/config/plugins/vim-markdown.vim

- repo: iamcco/markdown-preview.nvim
  if: "has('nvim')"
  on_ft: [markdown, pandoc.markdown, rmd]
  build: 'sh -c "cd app && yarn install"'
  hook_source: source $VIM_PATH/config/plugins/markdown-preview.vim

- repo: mzlogin/vim-markdown-toc
  hook_source: |
    let g:vmt_fence_text = 'TOC'
    let g:vmt_fence_closing_text = '/TOC'
    let g:vmt_auto_update_on_save = 1
  on_ft: [markdown, vim, vimwiki]

- repo: junegunn/vim-emoji
  on_ft: [markdown, vim, vimwiki]

# LaTeX
# ----------------------------------------
- repo: lervag/vimtex
  on_ft: tex
  hook_source: source $VIM_PATH/config/plugins/vimtex.vim
# }}}


# Tools{{{
- { repo: andymass/vim-matchup, on_event: FileType }
- { repo: itchyny/vim-parenmatch, on_event: FileType }
- { repo: itchyny/vim-gitbranch, on_event: FileType }
- { repo: romainl/vim-cool, on_event: [ CursorMoved, InsertEnter ] }
- { repo: t9md/vim-quickhl, on_map: { nv: <Plug> }}

# To setup Google Calendar with calenar.vim
# https://github.com/itchyny/calendar.vim#important-notice
- repo: itchyny/calendar.vim
  on_cmd: Calendar
  hook_source: source $VIM_PATH/config/plugins/calendar.vim

- repo: t9md/vim-choosewin
  on_map: {n: <Plug>}
  hook_source: source  $VIM_PATH/config/plugins/choosewin.vim

- repo: junegunn/goyo.vim
  depends: Limelight.vim
  on_cmd: Goyo
  hook_source: source $VIM_PATH/config/plugins/goyo.vim

- repo: junegunn/Limelight.vim
  on_cmd: Limelight
  hook_source: source $VIM_PATH/config/plugins/limelight.vim

- repo: junegunn/fzf
  merged: 0
  on_cmd: FZF
  type__depth: 1
  hook_source: |
    let g:fzf_layout = { 'down': '~25%' }

- repo: junegunn/fzf.vim
  depends: fzf
  merged: 0
  on_cmd: [ Files, GitFiles, Buffers, Lines, Locate, Colors, Ag, Rg, Tags ]
  on_func: [ fzf#vim#with_preview, fzf#run, vista#finder#fzf#Run ]

- repo: liuchengxu/vim-clap
  merged: 0
  build: call clap#installer#build_all()
  on_map: { n: <Plug> }
  on_func: [ vista#finder#clap#Run ]
  hook_source: source $VIM_PATH/config/plugins/vim-clap.vim

- repo: hokorobi/vim-clap-sessions
  depends: vim-clap
  hook_add: |
    let g:clap_session_dir = $DATA_PATH . '/session'

- repo: ludovicchabant/vim-gutentags
  if: "executable('ctags')"
  on_event: [BufReadPost, BufWritePost]
  hook_source: source $VIM_PATH/config/plugins/vim-gutentags.vim

- repo: liuchengxu/vista.vim
  on_cmd: Vista
  hook_source: source $VIM_PATH/config/plugins/vista.vim

- repo: wfxr/minimap.vim
  if: "executable('cargo')"
  build: 'cargo install --locked code-minimap'
  on_cmd: [ Minimap, MinimapToggle ]
  hook_source: |
    let g:minimap_block_filetypes = ['fugitive', 'nerdtree', 'fern', 'defx', 'vista']

- repo: liuchengxu/vim-which-key
  on_cmd: [Whichkey, Whichkey!]
  hook_add: source $VIM_PATH/config/plugins/whichkey.vim
  hook_post_source: |
    call which_key#register('<Space>', 'g:which_key_map')
    call which_key#register(';', 'g:which_key_localmap')
    call which_key#register(']', 'g:which_key_rsbgmap')
    call which_key#register('[', 'g:which_key_lsbgmap')
    call which_key#register('d', 'g:which_key_dmap')
    call which_key#register('s', 'g:which_key_smap')
    call which_key#register('g', 'g:which_key_gmap')

- repo: airblade/vim-rooter
  on_event: FileType
  hook_add: |
    let g:rooter_change_directory_for_non_project_files = 'current'
    let g:rooter_manual_only = 1
    let g:rooter_patterns = [
        \ '=src',
        \ '.git/',
        \ 'README.*',
        \ 'node_modules/',
        \ 'pom.xml',
        \ 'env/',
        \ '.root',
        \ '.editorconfig',
        \ 'Makefile',
        \ 'makefile',
        \ ]
    let g:rooter_silent_chdir = 1
    let g:rooter_resolve_links = 1
    let g:rooter_cd_cmd = 'lcd'

- repo: metakirby5/codi.vim
  on_cmd: Codi
  hook_source: source $VIM_PATH/config/plugins/codi.vim

- repo: benmills/vimux
  on_cmd:
    - VimuxPromptCommand
    - VimuxRunLastCommand
    - VimuxInspectRunner
    - VimuxCloseRunner
    - VimuxInterruptRunner
    - VimuxZoomRunner
  hook_source: |
    let g:VimuxPromptString = "Shell command? $ "
    let g:VimuxUseNearest = 1
    let g:VimuxOrientation = 'v'

- repo: voldikss/vim-floaterm
  on_cmd: [FloatermNew, FloatermToggle, FloatermPrev, FloatermNext, FloatermSend]
  hook_source: source  $VIM_PATH/config/plugins/floaterm.vim

# Only load when in wiki directory
- repo: vimwiki/vimwiki
  rev: dev
  on_if: "(getcwd() =~ $HOME . '/Documents/wiki.*' && &filetype == 'markdown')"
  on_cmd: [VimwikIndex, VimwikiDiaryIndex, VimwikiUISelect]
  hook_source: source $VIM_PATH/config/plugins/vimwiki.vim

# Only load when in wiki diary sub directory
- repo: tbabej/taskwiki
  on_if: "(expand('%:p') =~ $HOME . '/Documents/wiki/wiki/md/diary/.*' && &filetype == 'vimwiki')"
  depends: vimwiki
  hook_source: source $VIM_PATH/config/plugins/taskwiki.vim

- repo: xarthurx/taskwarrior.vim
  on_event: FileType

- repo: honza/dockerfile.vim
  on_ft: Dockerfile

- repo: thinca/vim-quickrun
  on_cmd: QuickRun
  hook_add: |
    let g:quickrun_config = {
        \   "_" : {
        \       "outputter" : "message",
        \   },
        \}
    let g:quickrun_no_default_key_mappings = 1

- repo: kshenoy/vim-signature
  on_event: FileType
  hook_add: |
    let g:SignatureForceRemoveGlobal = 1
    let g:SignatureUnconditionallyRecycleMarks = 1
    let g:SignatureErrorIfNoAvailableMarks = 0
    let g:SignaturePurgeConfirmation = 0
    let g:SignatureMarkTextHLDynamic = 1
    let g:SignatureMarkerTextHLDynamic = 1
    let g:SignatureIncludeMarkers = repeat('⚐', 10)

- repo: Ron89/thesaurus_query.vim
  on_cmd:
    - Thesaurus
    - ThesaurusQueryReplaceCurrentWord
    - ThesaurusQueryLookupCurrentWord
  hook_add: |
    let g:tq_map_keys = 0
    let g:tq_use_vim_autocomplete = 0

- repo: reedes/vim-wordy
  on_cmd: [Wordy, NextWordy, PrevWordy]

- repo: tpope/vim-abolish
  on_event: FileType

- repo: arthurxavierx/vim-caser
  on_ft: [vim, md, vimwiki, json, go, html, js, jsx, py, css, java, less, tmpl, toml, xml, sql, Dockerfile]

- repo: simnalamburt/vim-mundo
  on_map: {n: <Plug>}

- repo: tpope/vim-repeat
  on_map: .*

- repo: easymotion/vim-easymotion
  on_map: {n: <Plug>}
  hook_source: |
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_prompt = 'Jump to → '
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1
    let g:EasyMotion_startofline = 0

- repo: brooth/far.vim
  on_cmd: [F, Far, Farr, Farf, Refar, Farundo]
  hook_source: |
    let g:far#enable_undo=1
    if executable('rg')
      let g:far#source = 'rg'
    elseif executable('ag')
      let g:far#source = 'ag'
    elseif executable('ack')
      let g:far#source = 'ack'
    endif

- repo: pechorin/any-jump.vim
  on_cmd: AnyJump
  hook_source: source $VIM_PATH/config/plugins/any-jump.vim
# }}}

# UI{{{
# - repo: nathanaelkane/vim-indent-guides
#   on_event: FileType
#   hook_source: source $VIM_PATH/config/plugins/vim-indent-guides.vim

- repo:  glepnir/indent-guides.nvim
  on_event: FileType
  hook_source: luafile $VIM_PATH/config/plugins/indent-guides.lua

- repo: norcalli/nvim-colorizer.lua
  if: "has('nvim') && has('nvim-0.4.0')"
  on_event: FileType
  hook_source: luafile $VIM_PATH/config/plugins/colorizer.lua

- repo: romainl/vim-qf
  on_ft: qf
  on_event: QuickFixCmdPost
  on_map: { n: <Plug> }
  hook_add: |
    let g:qf_bufname_or_text = 1
    let g:qf_auto_open_quickfix = 0
    let g:qf_auto_open_loclist = 0
    let g:qf_auto_resize = 0
    let g:qf_auto_quit = 0

- repo: itchyny/vim-cursorword
  on_event: FileType
  hook_add: let g:cursorword = 0
  hook_source: |
    augroup user_plugin_cursorword
      autocmd!
      autocmd FileType json,yaml,markdown,nginx,dosini,conf
        \ let b:cursorword = 1
      autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif
      autocmd InsertEnter * if get(b:, 'cursorword', 0) == 1
        \| let b:cursorword = 0
        \| endif
      autocmd InsertLeave * if get(b:, 'cursorword', 1) == 0
        \| let b:cursorword = 1
        \| endif
    augroup END

- repo: rhysd/accelerated-jk
  on_map: { n: <Plug> }
  hook_source: |
    let g:accelerated_jk_enable_deceleration = 1
    let g:accelerated_jk_acceleration_limit = 200

- repo: kyazdani42/nvim-tree.lua
  if: "has('nvim') && has('nvim-0.5')"
  on_cmd: [ NvimTreeToggle, NvimTreeOpen ]
  hook_source: |
    source $VIM_PATH/config/plugins/nvim-tree.vim
    source $VIM_PATH/config/plugins/nvim-tree.lua

- repo: kyazdani42/nvim-web-devicons
  if: "has('nvim') && has('nvim-0.5')"
  on_source: nvim-tree.lua

- repo: lambdalisue/fern.vim
  on_cmd: Fern
  hook_source: source $VIM_PATH/config/plugins/fern.vim

- repo: lambdalisue/fern-renderer-nerdfont.vim
  on_source: fern.vim

- repo: lambdalisue/nerdfont.vim
  on_source: fern.vim

- repo: lambdalisue/glyph-palette.vim
  on_source: fern.vim

- repo: lambdalisue/fern-git-status.vim
  on_source: fern.vim

- repo:  lambdalisue/fern-mapping-project-top.vim
  on_source: fern.vim
# }}}

# Operators {{{
- repo: kana/vim-operator-user  # only autoload functions, lazy by nature
- repo: kana/vim-operator-replace
# }}}

# Text Objects {{{
- repo: terryma/vim-expand-region
  on_map: { x: <Plug> }
- repo: kana/vim-textobj-user
- repo: kana/vim-textobj-entire
- repo: kana/vim-textobj-function
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_function_no_default_key_mappings = 1
# }}}

# ETC {{{
- repo: ThePrimeagen/vim-be-good
  on_cmd: VimBeGood

- repo: dstein64/vim-startuptime
  on_event: VimEnter

- repo:  ianding1/leetcode.vim
  on_cmd: [ LeetCodeList, LeetCodeTest, LeetCodeSubmit, LeetCodeSignIn ]
  hook_add: |
    let g:leetcode_browser = 'firefox'
    let g:leetcode_solution_filetype = 'java'
# }}}

- repo: nvim-lua/popup.nvim
- repo: nvim-lua/plenary.nvim
- repo: nvim-telescope/telescope.nvim
- repo: nvim-treesitter/nvim-treesitter
  build: TSUpdate
  hook_source: luafile $VIM_PATH/config/plugins/nvim-treesitter.lua
- repo: nvim-treesitter/nvim-treesitter-textobjects

